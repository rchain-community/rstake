
// control REV Vault from smart contract
// https://rchain.atlassian.net/browse/RCHAIN-3260
// https://github.com/rchain/rchain/blob/dev/casper/src/main/resources/MultiSigRevVault.rho

new deployResult, // (`rho:rchain:deployId`),
StakingPool,
RevAddress(`rho:rev:address`),
regInsert(`rho:registry:insertArbitrary`),
registryLookup(`rho:registry:lookup`),
stdout(`rho:io:stdout`),
RevVaultCh,
AuthKeyCh,
ListOpsCh
in {
  registryLookup!(`rho:rchain:authKey`, *AuthKeyCh) |
  // // regLookup!(`rho:lang:listOps`, *ListOpsCh) |
  registryLookup!(`rho:rchain:revVault`, *RevVaultCh) |
  for(
    @(_, AuthKey) <- AuthKeyCh;
    @(_, *RevVault) <- RevVaultCh
  ) {
    new uriCh in {
      regInsert!(bundle+{*StakingPool}, *uriCh) |
      for (@uri <- uriCh) {
        stdout!({"StakingPool uri": uri})
      }
    }
    |
    contract StakingPool(@"create", unsealer /*TODO: many unsealers*/, ret) = {
      stdout!({"create unsealer": *unsealer}) |
      new self, unf, revAddrCh, v1Ch, balanceCh, authKeyCh in {
        RevAddress!("fromUnforgeable", *unf, *revAddrCh) |
        RevVault!("unforgeableAuthKey", *unf, *authKeyCh) |
        for (@revVaultAuthKey <- authKeyCh; @revAddr <- revAddrCh) {
          stdout!({"new staking pool rev addr": revAddr, "authKey": revVaultAuthKey}) |
          RevVault!("findOrCreate", revAddr, *v1Ch) |
          for (@(true, *vault) <- v1Ch) {
            stdout!({"vault": *vault}) |
            ret!(bundle+{*self}) |

            /* TODO: go beyond just testing the vault mechanics... */
            contract self(@"redeem", @targetAddr, @amount, @sealedOrder, ret) = {
              stdout!({"redeem target": targetAddr, "amount": amount, "sealedOrder": sealedOrder}) |
              new orderCh in {
                unsealer!(sealedOrder, *orderCh) |
                for (@(ok, order) <- orderCh) {
                  stdout!({"ok": ok, "order": order}) |
                  if (ok and order == (bundle+{*self}, targetAddr, amount, *ret)) {
                    new txCh in {
                      vault!("transfer", targetAddr, amount, revVaultAuthKey, *txCh) |
                      for (@(success, msg) <- txCh) {
                        stdout!({"transfer success": success, "msg": msg}) |
                        if (success) {
                          ret!((true, Nil))
                        } else {
                          ret!((false, msg))
                        }
                      }
                    }
                  } else {
                    ret!((false, "sealed order does not match"))
                  }
                }
              }
            }

          }
        }
      }
    }
    |
    // test...
    new spCh, multiSigRevVaultCh, brandPairCh, txCh, sealedOrderCh in {
      registryLookup!(`rho:rchain:multiSigRevVault`, *multiSigRevVaultCh) |
      for(@(_, *MultiSigRevVault) <- multiSigRevVaultCh) {
        MultiSigRevVault!("makeSealerUnsealer", *brandPairCh) |
        for (@(*sealer, *unsealer) <- brandPairCh) {
          stdout!({"brandPair": (*sealer, *unsealer)}) |
          StakingPool!("create", *unsealer, *spCh) |
          for (sPool <- spCh) {
            stdout!({"test got staking pool": *sPool}) |
            // TODO: use match a la let to DRY out "1234", 10
            sealer!((*sPool, "1111njay6rbbZ6N6anbAeQxZZdetgnyFUz7vcZZ6hnzACZbQx7JNq", 10, *txCh), *sealedOrderCh) |
            for (@sealedOrder <- sealedOrderCh) {
              sPool!("redeem", "1111njay6rbbZ6N6anbAeQxZZdetgnyFUz7vcZZ6hnzACZbQx7JNq", 10, sealedOrder, *txCh) |
              for (@txResult <- txCh) {
                stdout!({"txResult": txResult})
              }
            }
          }
        }
      }
    }
  }
}
